{
  "hash": "229836f3d66002a2ff8bed7210eff400",
  "result": {
    "markdown": "---\ntitle: \"Challenge 10 Instructions\"\nauthor: \"Gabrielle Roman\"\ndescription: \"purrr\"\ndate: \"8/25/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_10\n---\n\n\n\n\n## Challenge Overview\n\nThe [purrr](https://purrr.tidyverse.org/) package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. \n\nFor example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 100 # sample size\nm <- seq(1,10) # means \nsamps <- map(m,rnorm,n=n) \n```\n:::\n\n\nWe can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamps %>%\n  map_dbl(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.9957672 1.9396128 2.8589230 3.9232527 5.0227131 5.9155174 7.0177964\n [8] 8.0768921 8.8904134 9.8977102\n```\n:::\n:::\n\n\n`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  \n\n## The challenge  \n\nUse `purrr` with a function to perform *some* data science task. What this task is is up to you. It could involve computing summary statistics, reading in multiple datasets, running a random process multiple times, or anything else you might need to do in your work as a data analyst. You might consider using `purrr` with a function you wrote for challenge 9.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrimmed_mean <- function(x){\n  mean(x, trim = 0.2)\n}\n  \ndata1<- c(31, 49, 81, 20, 29, 893, 10, 27, 70, 44, 58, 68, 200)\n\ndata_1_trimmed_mean<-trimmed_mean(data1)\n\ndata_1_trimmed_mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.77778\n```\n:::\n\n```{.r .cell-code}\nanimal_weight<-read_csv(\"_data/animal_weight.csv\")\n\nbird_trimmed_means<-animal_weight %>% \n  select(7:10) %>% \n  map_df(trimmed_mean)\n\nbird_trimmed_means\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 Ã— 4\n  `Chicken - Broilers` `Chicken - Layers` Ducks Turkeys\n                 <dbl>              <dbl> <dbl>   <dbl>\n1                  0.9                1.8   2.7     6.8\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "968e23645cc1b9ff3c71b4e457028c6a",
  "result": {
    "markdown": "---\ntitle: \"Eli Boahen | Tutorial 2: RMarkdown and Best Practices\"\nauthor: \"Eli Boahen\"\ndescription: \"Notes and examples from Tutorial 2 submitted by Eli\"\ndate: \"07/02/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - tutorial2\n  - Eli Boahen\n  - RMarkdown Basics\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\nIn this tutorial, we will make our mark in our coding learning journey by learning about `RMarkdown`\n\n\n## What's a `knitr`?\n\n`knitr` is what Rmarkdown runs on. Think of it this way:\n\nR is code \n\n::: {.cell}\n\n```{.r .cell-code}\n#like this\n```\n:::\n\n\nThen we have text . . . well like this\n\nand our charts or analyses `We haven't gone over how to do that yet`\n\n`knitr` literally knits `R` together into 1 document.\nLike a PDF or, well, like this page.\n\nIf you're worried that `knitr` is not installed, you can search for it in the packages section of Rstudio.\nRight side of window ( bottom quadrant ) > Find the row of tabs with *Files* > Look for *Packages* > Click *Packages* > Type \"knitr\" into the search bar\n`knitr` should come up with a decription and version. I'm using version `1.42`\n:::{callout-tip}\n## What you can knit\nto `knit` a `RMarkdown` file into a PDF, you need something called a `Tex` distribution\nJust like with real knitting!--you may need an extra tool to help\n:::\n\n## The Basics\nSo we know that `knitr` knits `R` into a nice little document, then what is `RMarkdown`. `RMarkdown` is `Markdown` but for `R`. `Markdown` is a language is a markdown language that allows people to format text, notes, documents, and even websites. It's prett handy, especially for making Intro or descriptive documents for GitHub repositories often dubbed `READme` files.\n\nTo start one in R Studio, we have to:\n\n Click *File* > Hover of Click *New File*\n \n Now, you will be faced with a whole list of options. Move you mouse over the list, then select *R Markdown...*\n\nYou will see a pop-up window where we can fill out the `Title` `Author` and the `Date` if needed; the date is automatically set to the day you are making the new RMarkdown file\n\n:::{.callout-warning}\n## Title vs File Name\nThe `Title` you fill out when you make the `RMarkdown` file is different from the name you five to the file.I can fill out *Title* as \"Test\" but name the file `Test_Test.rmd`\n:::\n\nWe are going to keep the format *HTML*. Click *OK*.\n\nNow that we made the file *please do not freak out*. A new `R` file can be intimidating. All of the information there is to help you, auto generated for your convenience.\n\nOkay, stick with me here:\n\nThe Top 6 lines re *metadata* which is information about our file\n\n::: {.cell}\n\n```{.r .cell-code}\n# It looks like this\n# 1 | ---\n# 2 | title: \"Test\"\n# 3 | author: \"Eli B\"\n# 4 | date: \"2023-07-02\"\n# 5 | output: html_document\n# 6 | ---\n```\n:::\n\n\nLoos familiar? Because we filled out some of this info when we *made the file*!\n\nThe next chunk, yes chunk is the technical term, is called the *setup section*. This is where we tell the `RMarkdown` file how to set-up the page. In the new `.rmd` file you may have created,  it should say\n\n::: {.cell}\n\n```{.r .cell-code}\n# {r setup, include=FALSE}\n# knitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\nWhat all of this means is\n\" Hey, setup `R` in this document \"\n\" We are going to `knit` together this document and I want you to `echo` the `R` code we write here ( which means show the `R` code we type out on the page / document ) \"\n\n\nAll of this top section is called `YAML` which literally means `Yet Another Markdown Language`\n\n## For Example . . .\nWe can name our code chunks\n\n::: {.cell}\n\n```{.r .cell-code}\nchunk <- \"chunkiest\"\nchunk\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"chunkiest\"\n```\n:::\n:::\n\n\nWhen we do this--name our code chunks, create subheadings etc.--we not only make it easier for readers to navigate, but also our selves.\n\nLook along the bottom of your R file\nThat's RStudio > Top left quadrant >look at the bar riiight above the `Console`, `Terminal`, `Background Jobs` tabs.\nNow, if you made subheadings or named your chunks, you can click the arrows next to the name of your current chunk, and navigate your R document! Pretty cool, right?\n:::{callout-tip}\n## There R Differences in `.R` files\nAnything ending in `.R`` is called an *R script*\nFiles ending in `.Rmd` are `RMarkdowns`s\n:::\n\n## Nest Practices\n\nNow, I've done my best to incorporate these elements throughout this doc ( and the previous one )\n\n### #CommentYourCode!\nComments help us remember or communicate what's going on & what we're doing\n\n::: {.cell}\n\n```{.r .cell-code}\n#I want to figure out how much my grade is gonna crash ;w;\ngrade <- 85\n( grade + 65 )/2 #I really crashed during the last exam\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 75\n```\n:::\n:::\n\n And remember\n >*Be as verbose as possible when commenting.*\n \n### ChooseYour Best_Case_Senario\nThere are many ways to name a variable, and when we aim to be *verbose* our names can get a little long\n`veryspecificvariableweshouldnotchange`\n\nWe can increase readability by using CamelCase\n`verySpecificVariableWeShouldNotChange`\n\nSnake_Case\n`very_specific_variable_we_should_not_change`\n\nOr even dots\n`very.spcific.variable.we.should.not.change`\n\nThe important this is to remain consistent.\n\n## Stay Polite\n\n>\n* Don't change people's code\n* Download packages in console\n* run your dat in the scropt *__then__* comment it out\n\n## The End\nThis is Eli and this has been a long one. See you in Tutorial 3!\n ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
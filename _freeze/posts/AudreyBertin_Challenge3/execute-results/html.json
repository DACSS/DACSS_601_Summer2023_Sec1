{
  "hash": "73486a9b868481f246a1f21dbaa63644",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Audrey Bertin\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"6/1/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - australian_marriage\n  - pivot_longer\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Data Overview \n\nFor this challenge, I'll be reading and tidying the `eggs_tidy.csv ⭐⭐` dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs <- readr::read_csv(\"_data/eggs_tidy.csv\")\n```\n:::\n\n\nLooking at this data before tidying, we see the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 120\nColumns: 6\n$ month                  <chr> \"January\", \"February\", \"March\", \"April\", \"May\",…\n$ year                   <dbl> 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,…\n$ large_half_dozen       <dbl> 126.00, 128.50, 131.00, 131.00, 131.00, 133.50,…\n$ large_dozen            <dbl> 230.000, 226.250, 225.000, 225.000, 225.000, 23…\n$ extra_large_half_dozen <dbl> 132.000, 134.500, 137.000, 137.000, 137.000, 13…\n$ extra_large_dozen      <dbl> 230.0, 230.0, 230.0, 234.5, 236.0, 241.0, 241.0…\n```\n:::\n:::\n\nThe dataset has 120 rows and 6 columns. Each row appears to represent a specific month, with the variables showing how many eggs packages (or how much money's worth) of each size were either sold or produced within that month.\n\nThe two variables that uniquely describe each row are `month` and `year`, so these will NOT be pivoted and will need to remain constant. However, the other four variables (`large_half_dozen`, `large_dozen`, `extra_large_half_dozen` and `extra_large_dozen`) can be pivoted together because they all store the exact same type of information (count).\n\nWhen we pivot the data, we want to reformat so that we have the following columns:\n\n- `month`\n- `year`\n- `carton_type`\n- `amount`\n\nNote: It is not clear exactly what the amount is representing without more information about the dataset, so we will use a generic name here for now.\n\nWe are starting with `n = 120` rows and `k = 6` columns and pivoting `4` (or `k - 2`) variables. This means we should expect our final dataset to have `n * (k-2) = 120 * 4 = 480` rows and `4` columns.\n\n\n## Conducting the Pivot\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_pivoted <- pivot_longer(eggs, col = large_half_dozen:extra_large_dozen,\n                 names_to=\"carton_type\",\n                 values_to = \"amount\")\neggs_pivoted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 × 4\n   month     year carton_type            amount\n   <chr>    <dbl> <chr>                   <dbl>\n 1 January   2004 large_half_dozen         126 \n 2 January   2004 large_dozen              230 \n 3 January   2004 extra_large_half_dozen   132 \n 4 January   2004 extra_large_dozen        230 \n 5 February  2004 large_half_dozen         128.\n 6 February  2004 large_dozen              226.\n 7 February  2004 extra_large_half_dozen   134.\n 8 February  2004 extra_large_dozen        230 \n 9 March     2004 large_half_dozen         131 \n10 March     2004 large_dozen              225 \n# ℹ 470 more rows\n```\n:::\n:::\n\n\nOnce we conduct this pivot, we see we have the correct (predicted) number of rows and columns, as well as the variables we want.\n\nBefore, a case/row represented a month in a particular year (and *all* cartons from within that month). Now a case represents only a specific egg carton type within a specific month/year, and there are four cases per month/year.\n\nThe three conditions of tidy data (according to Hadley Wickham) are:\n\n1. Each variable must have its own column.\n2. Each observation must have its own row.\n3. Each value must have its own cell.\n\nWe can see that all of these are true. Variables are in their own unique columns, observations are separated out and have one unique row each, and there are not multiple values per cell.\n\nThe data is also in a much easier format for plotting, as with `carton_type` as a variable, it makes it much easier to do something like a `facet_wrap` to compare across types, versus having to separately draw four plots.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
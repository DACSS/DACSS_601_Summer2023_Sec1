{
  "hash": "76ca0ebc80bc62656831ba22adee191b",
  "result": {
    "markdown": "---\ntitle: \"Challenge 9\"\nauthor: \"Gabrielle Roman\"\ndescription: \"Creating a function\"\ndate: \"8/25/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_9\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is simple. Create a function, and use it to perform a data analysis / cleaning / visualization task:\n\nExamples of such functions are:\n1) A function that reads in and cleans a dataset.  \n2) A function that computes summary statistics (e.g., computes the z score for a variable).  \n3) A function that plots a histogram.  \n\nThat's it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrimmed_mean <- function(x){\n  mean(x, trim = 0.2)\n}\n  \ndata1<- c(31, 49, 81, 20, 29, 893, 10, 27, 70, 44, 58, 68, 200)\n\ndata_1_trimmed_mean<-trimmed_mean(data1)\n\ndata_1_trimmed_mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.77778\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplotting<-function(dat, colname, fill = \"black\"){dat %>% \n    ggplot(aes({{colname}}))+\n    geom_bar(fill = fill)+\n    labs(x=\"xlab\", y=\"ylab\", title = \"Barplotted\", subtitle = \"Written with function\")\n}\n\ndata2<-data.frame(name = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n                  value = c(24, 32, 19, 20, 41))\n\nbarplotting(data2, name)\n```\n\n::: {.cell-output-display}\n![](challenge9_GabrielleRoman_files/figure-html/Function for barplot-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "challenge9_GabrielleRoman_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}